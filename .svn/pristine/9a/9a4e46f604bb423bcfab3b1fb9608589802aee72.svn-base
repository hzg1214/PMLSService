package cn.com.eju.pmls.jsStatement.service;

import cn.com.eju.deal.base.helper.LogHelper;
import cn.com.eju.deal.core.support.QueryConst;
import cn.com.eju.deal.core.support.ResultData;
import cn.com.eju.pmls.jsStatement.dao.PmlsJsStatementDtlMapper;
import cn.com.eju.pmls.jsStatement.dao.PmlsJsStatementMapper;
import cn.com.eju.pmls.jsStatement.dao.PmlsStatementCashBillRelateMapper;
import cn.com.eju.pmls.jsStatement.dto.*;
import cn.com.eju.pmls.jsStatement.model.PmlsJsStatement;
import cn.com.eju.pmls.jsStatement.model.PmlsStatementCashBillRelate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

@Service("jsStatementService")
public class JsStatementService {

    private final LogHelper logger = LogHelper.getLogger(this.getClass());

    @Autowired
    PmlsJsStatementMapper pmlsJsStatementMapper;

    @Autowired
    PmlsJsStatementDtlMapper pmlsJsStatementDtlMapper;

    @Autowired
    PmlsStatementCashBillRelateMapper pmlsStatementCashBillRelateMapper;

    /**
     * 查询
     */
    public ResultData<List<PmlsJsStatementDto>> queryList(Map<String, Object> queryParam) {
        ResultData<List<PmlsJsStatementDto>> resultData = new ResultData<List<PmlsJsStatementDto>>();
        List<PmlsJsStatementDto> list = pmlsJsStatementMapper.queryList(queryParam);
        resultData.setTotalCount((String) queryParam.get(QueryConst.TOTAL_COUNT));
        resultData.setReturnData(list);
        return resultData;
    }

    /**
     * 作废
     */
    public ResultData toInvalid(PmlsJsStatement statement) throws Exception {
        ResultData resultData = new ResultData();
        Integer id = statement.getId();
        PmlsJsStatement record = pmlsJsStatementMapper.selectByPrimaryKey(id);
        // 10401:草稿的场合 or 10404:审核不通过的场合 可以修改为作废
        if ("10401".equals(record.getApproveStatus()) || "10404".equals(record.getApproveStatus())) {
            pmlsJsStatementMapper.updateByPrimaryKeySelective(statement);
        } else {
            resultData.setReturnCode("201");
            resultData.setReturnMsg("本结算单当前状态已变更！");
        }
        return resultData;
    }

    /**
     * 终止
     */
    public ResultData toTermination(PmlsJsStatement statement) throws Exception {
        ResultData resultData = new ResultData();
        Integer id = statement.getId();
        PmlsJsStatement record = pmlsJsStatementMapper.selectByPrimaryKey(id);
        // 10403: 审核通过 且 结算书没有被请款过 才可以修改为终止
        if ("10403".equals(record.getApproveStatus())) {
            PmlsStatementCashBillRelate relate = pmlsStatementCashBillRelateMapper.getTopByStatementId(id);
            if (relate == null) {
                pmlsJsStatementMapper.updateByPrimaryKeySelective(statement);
            } else {
                resultData.setReturnCode("202");
                resultData.setReturnMsg("本结算单已请款！");
            }
        } else {
            resultData.setReturnCode("201");
            resultData.setReturnMsg("本结算单当前状态已变更！");
        }
        return resultData;
    }


    public ResultData<List<PmlsJsCompanyDto>> queryJsCompanyList(Map<String, Object> queryParam) {

        ResultData<List<PmlsJsCompanyDto>> resultData = new ResultData<List<PmlsJsCompanyDto>>();
        List<PmlsJsCompanyDto> list = pmlsJsStatementDtlMapper.queryJsCompanyList(queryParam);
        resultData.setTotalCount((String) queryParam.get(QueryConst.TOTAL_COUNT));
        resultData.setReturnData(list);
        return resultData;
    }

    public ResultData<List<PmlsJsProjectDto>> queryJsProjectList(Map<String, Object> queryParam) {

        ResultData<List<PmlsJsProjectDto>> resultData = new ResultData<List<PmlsJsProjectDto>>();
        List<PmlsJsProjectDto> list = pmlsJsStatementDtlMapper.queryJsProjectList(queryParam);
        resultData.setTotalCount((String) queryParam.get(QueryConst.TOTAL_COUNT));
        resultData.setReturnData(list);
        return resultData;
    }

    public ResultData<List<PmlsJsHSCodeDto>> queryJsHSCodeList(Map<String, Object> queryParam) {

        ResultData<List<PmlsJsHSCodeDto>> resultData = new ResultData<List<PmlsJsHSCodeDto>>();
        List<PmlsJsHSCodeDto> list = pmlsJsStatementDtlMapper.queryJsHSCodeList(queryParam);
        resultData.setTotalCount((String) queryParam.get(QueryConst.TOTAL_COUNT));
        resultData.setReturnData(list);
        return resultData;
    }

    public ResultData<List<PmlsJsKHCodeDto>> queryJsKHCodeList(Map<String, Object> queryParam) {

        ResultData<List<PmlsJsKHCodeDto>> resultData = new ResultData<List<PmlsJsKHCodeDto>>();
        List<PmlsJsKHCodeDto> list = pmlsJsStatementDtlMapper.queryJsKHCodeList(queryParam);
        resultData.setTotalCount((String) queryParam.get(QueryConst.TOTAL_COUNT));
        resultData.setReturnData(list);
        return resultData;
    }

    public ResultData<List<PmlsJsFrameOaDto>> queryJsFrameOaList(Map<String, Object> queryParam) {

        ResultData<List<PmlsJsFrameOaDto>> resultData = new ResultData<List<PmlsJsFrameOaDto>>();
        List<PmlsJsFrameOaDto> list = pmlsJsStatementDtlMapper.queryJsFrameOaList(queryParam);
        resultData.setTotalCount((String) queryParam.get(QueryConst.TOTAL_COUNT));
        resultData.setReturnData(list);
        return resultData;
    }

    public ResultData<List<PmlsJsReportDto>> queryJsNormalReportList(Map<String, Object> queryParam) {

        this.overridePageMap(queryParam);
        ResultData<List<PmlsJsReportDto>> resultData = new ResultData<List<PmlsJsReportDto>>();
        List<PmlsJsReportDto> list = pmlsJsStatementDtlMapper.queryJsNormalReportList(queryParam);
        resultData.setTotalCount( queryParam.get(QueryConst.TOTAL_COUNT).toString());
        resultData.setReturnData(list);
        return resultData;
    }

    public ResultData<List<PmlsJsReportDto>> queryJsOffsetReportList(Map<String, Object> queryParam) {

        this.overridePageMap(queryParam);
        ResultData<List<PmlsJsReportDto>> resultData = new ResultData<List<PmlsJsReportDto>>();
        List<PmlsJsReportDto> list = pmlsJsStatementDtlMapper.queryJsOffsetReportList(queryParam);
        resultData.setTotalCount( queryParam.get(QueryConst.TOTAL_COUNT).toString());
        resultData.setReturnData(list);
        return resultData;
    }

    private Map<String, Object> overridePageMap(Map<String, Object> queryParam) {

        int pageIndex = 1;
        int pageSize = 10;
        if (queryParam.get("pageIndex") != null)
            pageIndex = Integer.parseInt(queryParam.get("pageIndex").toString());
        if (queryParam.get("pageSize") != null)
            pageSize = Integer.parseInt(queryParam.get("pageSize").toString());
        queryParam.remove("pageIndex");
        queryParam.remove("pageSize");

        queryParam.put("offset", (pageIndex - 1) * pageSize);
        queryParam.put("rows", pageSize);
        queryParam.put("totalCount", 0);

        return queryParam;
    }

    /**
     * desc:结算书详情
     * 2020年5月28日
     */
    public ResultData getJsStatementDetail(Map<String, Object> queryParam) {
        ResultData resultData = new ResultData<>();
        PmlsJsStatementDto pmlsJsStatementDto = pmlsJsStatementMapper.getJsStatementDetail(queryParam);
        resultData.setReturnData(pmlsJsStatementDto);
        return resultData;
    }
    
    /**
     * 
     * desc:获取详情中得请款单对应得数据
     * 2020年6月1日
     */
    public ResultData<Map<String, Object>> getCashBillDeatilByCashBillNo(Map<String, Object> map) throws Exception {
        ResultData resultData = new ResultData();
        Map<String, Object> list = pmlsJsStatementMapper.getCashBillDeatilByCashBillNo(map);
        resultData.setReturnData(list);
        return resultData;
    }
}
