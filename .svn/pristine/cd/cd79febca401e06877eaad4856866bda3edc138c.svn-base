<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                        http://www.springframework.org/schema/tx
         				http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">


	<!-- 自动扫描 -->
	<context:component-scan base-package="cn.com.eju">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>


	<!-- 引入配置文件 -->
	<!-- <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc-PMLS.properties" />
	</bean> -->

	<context:property-placeholder location="classpath:jdbc-PMLS.properties" ignore-unresolvable="true"/>

	<!--主数据源-->
	<bean id="dataSourceMain" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
		<!-- <property name="defaultAutoCommit"> <value>true</value> </property> -->
	</bean>

	<!-- OA数据源 合同审批进度视图数据源 -->
	<bean id="dataSourceOA" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.oa.url}" />
		<property name="username" value="${jdbc.oa.username}" />
		<property name="password" value="${jdbc.oa.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.maxWait}"></property>
		<!-- <property name="defaultAutoCommit"> <value>true</value> </property> -->
	</bean>

	<!-- 多数据源配置 -->
	<bean id="dataSource" class="cn.com.eju.deal.dataSource.DbcontextHolder"><!-- 这里写选择数据源的类地址 下面跟着给出-->
		<property name="defaultTargetDataSource" ref="dataSourceMain"/><!-- 设置默认为此dataSourceMain数据源-->
		<property name="targetDataSources">
			<map>
				<entry key="dataSourceMain" value-ref="dataSourceMain"/>
				<entry key="dataSourceOA" value-ref="dataSourceOA"/>
			</map>
		</property>
	</bean>


	<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"-->
		<!--destroy-method="close">-->
		<!--<property name="driverClassName" value="${jdbc.driverClassName}" />-->
		<!--<property name="url" value="${jdbc.url}" />-->
		<!--<property name="username" value="${jdbc.username}" />-->
		<!--<property name="password" value="${jdbc.password}" />-->
		<!--&lt;!&ndash; 初始化连接大小 &ndash;&gt;-->
		<!--<property name="initialSize" value="${jdbc.initialSize}"></property>-->
		<!--&lt;!&ndash; 连接池最大数量 &ndash;&gt;-->
		<!--<property name="maxActive" value="${jdbc.maxActive}"></property>-->
		<!--&lt;!&ndash; 连接池最大空闲 &ndash;&gt;-->
		<!--<property name="maxIdle" value="${jdbc.maxIdle}"></property>-->
		<!--&lt;!&ndash; 连接池最小空闲 &ndash;&gt;-->
		<!--<property name="minIdle" value="${jdbc.minIdle}"></property>-->
		<!--&lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="${jdbc.maxWait}"></property>-->
		<!--&lt;!&ndash; <property name="defaultAutoCommit"> <value>true</value> </property> &ndash;&gt;-->
	<!--</bean>-->

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="pmlsSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<!-- 自动扫描mapping.xml文件 -->
		<!-- <property name="mapperLocations" value="classpath:cn/com/eju/deal/**/mapping/*.xml"></property> -->

		<!-- 配置分页排序插件以及数据库方言 -->
		<property name="plugins">
			<list>
				<bean class="cn.com.eju.deal.base.persistence.plugin.PagingPlugin" />
				<bean class="cn.com.eju.deal.base.persistence.plugin.AuditLogPlugin" />
			</list>
		</property>
		<property name="configurationProperties">
			<props>
				<prop key="dialect">sqlserver</prop>
			</props>
		</property>

	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.com.eju" />
		<property name="sqlSessionFactoryBeanName" value="pmlsSqlSessionFactory"></property>
	</bean>

	<!-- 获取Spring的ApplicationContext对象的工具类 -->
	<bean id="SpringConfigHelper" class="cn.com.eju.deal.core.helper.SpringConfigHelper"></bean>

	<!-- 配置事务管理器 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" /> </bean> -->

	<!-- 配置事务特性 ，配置add、delete和update开始的方法，事务传播特性为required -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes> 读取数据方法，一般采用只读事务 <tx:method name="get*" read-only="true"/>
		<tx:method name="query*" read-only="true"/> <tx:method name="find*" read-only="true"/>
		<tx:method name="load*" read-only="true"/> <tx:method name="select*" read-only="true"
		propagation="REQUIRED"/> 以下方法，如save，update，insert等对数据库进行写入操作的方法，当产生Exception时进行回滚
		<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
		<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
		<tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ"
		/> <tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ"
		/> <tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
		<tx:method name="*" propagation="REQUIRED" isolation="REPEATABLE_READ" rollback-for="java.lang.Exception"
		/> </tx:attributes> </tx:advice> -->

	<!-- 配置那些类的方法进行事务管理，当前com.eju.deal.*.service包中的子包、类中所有方法需要 -->
	<!-- <aop:config proxy-target-class="true"> <aop:pointcut id="serviceOperation"
		expression="execution(* cn.com.eju.deal..*ServiceImpl.*(..))" /> <aop:advisor
		advice-ref="txAdvice" pointcut-ref="serviceOperation" /> </aop:config> -->

	<!-- 接口中需要控制 -->
	<!-- <bean id="WebServiceSecurityBeforeAdvice" class="com.eju.deal.core.filter.WebServiceSecurityBeforeAdvice"
		/> -->
	<!-- <aop:config proxy-target-class="true"> <aop:pointcut id="apiAccess"
		expression="execution(* cn.com.eju.deal..*APIImpl.*(..))" /> <aop:advisor
		advice-ref="txAdvice" pointcut-ref="apiAccess" /> </aop:config> -->


	<!-- 事务支持注解 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

</beans>
